
/*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
}

function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
}

peg$subclass(SyntaxError, Error);

function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = peg$FAILED,
        peg$c1 = [],
        peg$c2 = function(All) {return All},
        peg$c3 = "All",
        peg$c4 = { type: "literal", value: "All", description: "\"All\"" },
        peg$c5 = function(operator, xValue, pValue) {return {type:"operator",value:operator, children:[xValue, pValue]}},
        peg$c6 = "Ex",
        peg$c7 = { type: "literal", value: "Ex", description: "\"Ex\"" },
        peg$c8 = "&",
        peg$c9 = { type: "literal", value: "&", description: "\"&\"" },
        peg$c10 = function(left, operator, right) {return {type:"operator", value:operator, children:[left,right]}},
        peg$c11 = "->",
        peg$c12 = { type: "literal", value: "->", description: "\"->\"" },
        peg$c13 = "+",
        peg$c14 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c15 = "=",
        peg$c16 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c17 = ">=",
        peg$c18 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c19 = "<=",
        peg$c20 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c21 = "<",
        peg$c22 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c23 = "|",
        peg$c24 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c25 = "\xAC",
        peg$c26 = { type: "literal", value: "\xAC", description: "\"\\xAC\"" },
        peg$c27 = function(operator, right) {return {type:"operator", value:operator, children:[right]}},
        peg$c28 = "suc",
        peg$c29 = { type: "literal", value: "suc", description: "\"suc\"" },
        peg$c30 = function(letter) {return {type:"variable", value:letter}},
        peg$c31 = "{",
        peg$c32 = { type: "literal", value: "{", description: "\"{\"" },
        peg$c33 = "}",
        peg$c34 = { type: "literal", value: "}", description: "\"}\"" },
        peg$c35 = "(",
        peg$c36 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c37 = ")",
        peg$c38 = { type: "literal", value: ")", description: "\")\"" },
        peg$c39 = /^[' ',\\t]/,
        peg$c40 = { type: "class", value: "[' ',\\\\t]", description: "[' ',\\\\t]" },
        peg$c41 = "false",
        peg$c42 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c43 = "0",
        peg$c44 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c45 = /^[A-Za-z]/,
        peg$c46 = { type: "class", value: "[A-Za-z]", description: "[A-Za-z]" },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }

        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
        return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
        return peg$reportedPos;
    }

    function line() {
        return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
        return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
        throw peg$buildException(
            null,
            [{ type: "other", description: description }],
            peg$reportedPos
        );
    }

    function error(message) {
        throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
        function advance(details, startPos, endPos) {
            var p, ch;

            for (p = startPos; p < endPos; p++) {
                ch = input.charAt(p);
                if (ch === "\n") {
                    if (!details.seenCR) { details.line++; }
                    details.column = 1;
                    details.seenCR = false;
                } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                    details.line++;
                    details.column = 1;
                    details.seenCR = true;
                } else {
                    details.column++;
                    details.seenCR = false;
                }
            }
        }

        if (peg$cachedPos !== pos) {
            if (peg$cachedPos > pos) {
                peg$cachedPos = 0;
                peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
            }
            advance(peg$cachedPosDetails, peg$cachedPos, pos);
            peg$cachedPos = pos;
        }

        return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
        if (peg$currPos < peg$maxFailPos) { return; }

        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }

        peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
        function cleanupExpected(expected) {
            var i = 1;

            expected.sort(function(a, b) {
                if (a.description < b.description) {
                    return -1;
                } else if (a.description > b.description) {
                    return 1;
                } else {
                    return 0;
                }
            });

            while (i < expected.length) {
                if (expected[i - 1] === expected[i]) {
                    expected.splice(i, 1);
                } else {
                    i++;
                }
            }
        }

        function buildMessage(expected, found) {
            function stringEscape(s) {
                function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

                return s
                .replace(/\\/g,   '\\\\')
                .replace(/"/g,    '\\"')
                .replace(/\x08/g, '\\b')
                .replace(/\t/g,   '\\t')
                .replace(/\n/g,   '\\n')
                .replace(/\f/g,   '\\f')
                .replace(/\r/g,   '\\r')
                .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
                .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
                .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
                .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
            }

            var expectedDescs = new Array(expected.length),
                expectedDesc, foundDesc, i;

            for (i = 0; i < expected.length; i++) {
                expectedDescs[i] = expected[i].description;
            }

            expectedDesc = expected.length > 1
            ? expectedDescs.slice(0, -1).join(", ")
            + " or "
            + expectedDescs[expected.length - 1]
            : expectedDescs[0];

            foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

            return "Expected " + expectedDesc + " but " + foundDesc + " found.";
        }

        var posDetails = peg$computePosDetails(pos),
            found      = pos < input.length ? input.charAt(pos) : null;

        if (expected !== null) {
            cleanupExpected(expected);
        }

        return new SyntaxError(
            message !== null ? message : buildMessage(expected, found),
            expected,
            found,
            pos,
            posDetails.line,
            posDetails.column
        );
    }

    function peg$parsestart() {
        var s0, s1, s2, s3, s4;

        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsesep();
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsesep();
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseAll();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsesep();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsesep();
                }
                if (s3 !== peg$FAILED) {
                    peg$reportedPos = s0;
                    s1 = peg$c2(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }

        return s0;
    }

    function peg$parseAll() {
        var s0, s1, s2, s3, s4, s5, s6;

        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsesep();
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsesep();
        }
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c3) {
                s2 = peg$c3;
                peg$currPos += 3;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c4); }
            }
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsesep();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsesep();
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseAll();
                    if (s4 !== peg$FAILED) {
                        s5 = [];
                        s6 = peg$parsesep();
                        while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parsesep();
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseAll();
                            if (s6 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c5(s2, s4, s6);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseEx();
        }

        return s0;
    }

    function peg$parseEx() {
        var s0, s1, s2, s3, s4, s5, s6;

        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsesep();
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsesep();
        }
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c6) {
                s2 = peg$c6;
                peg$currPos += 2;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c7); }
            }
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsesep();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsesep();
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseAll();
                    if (s4 !== peg$FAILED) {
                        s5 = [];
                        s6 = peg$parsesep();
                        while (s6 !== peg$FAILED) {
                            s5.push(s6);
                            s6 = peg$parsesep();
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseAll();
                            if (s6 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c5(s2, s4, s6);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseAND();
        }

        return s0;
    }

    function peg$parseAND() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseimplication();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsesep();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsesep();
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 38) {
                    s3 = peg$c8;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c9); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsesep();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsesep();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseAND();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c10(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseimplication();
        }

        return s0;
    }

    function peg$parseimplication() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parsePlus();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsesep();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsesep();
            }
            if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c11) {
                    s3 = peg$c11;
                    peg$currPos += 2;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c12); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsesep();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsesep();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseimplication();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c10(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parsePlus();
        }

        return s0;
    }

    function peg$parsePlus() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseEquals();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsesep();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsesep();
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 43) {
                    s3 = peg$c13;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c14); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsesep();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsesep();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parsePlus();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c10(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseEquals();
        }

        return s0;
    }

    function peg$parseEquals() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseGEQ();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsesep();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsesep();
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                    s3 = peg$c15;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsesep();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsesep();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseEquals();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c10(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseGEQ();
        }

        return s0;
    }

    function peg$parseGEQ() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseLEQ();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsesep();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsesep();
            }
            if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c17) {
                    s3 = peg$c17;
                    peg$currPos += 2;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c18); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsesep();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsesep();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseGEQ();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c10(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseLEQ();
        }

        return s0;
    }

    function peg$parseLEQ() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parselessThan();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsesep();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsesep();
            }
            if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c19) {
                    s3 = peg$c19;
                    peg$currPos += 2;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c20); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsesep();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsesep();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseLEQ();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c10(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parselessThan();
        }

        return s0;
    }

    function peg$parselessThan() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseOR();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsesep();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsesep();
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                    s3 = peg$c21;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsesep();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsesep();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parselessThan();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c10(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseOR();
        }

        return s0;
    }

    function peg$parseOR() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseNot();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsesep();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsesep();
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 124) {
                    s3 = peg$c23;
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c24); }
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsesep();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsesep();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseOR();
                        if (s5 !== peg$FAILED) {
                            peg$reportedPos = s0;
                            s1 = peg$c10(s1, s3, s5);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseNot();
        }

        return s0;
    }

    function peg$parseNot() {
        var s0, s1, s2, s3, s4;

        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsesep();
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsesep();
        }
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 172) {
                s2 = peg$c25;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c26); }
            }
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsesep();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsesep();
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseSuc();
                    if (s4 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c27(s2, s4);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseSuc();
        }

        return s0;
    }

    function peg$parseSuc() {
        var s0, s1, s2, s3, s4;

        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parsesep();
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parsesep();
        }
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c28) {
                s2 = peg$c28;
                peg$currPos += 3;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
            }
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parsesep();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parsesep();
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseprimary();
                    if (s4 !== peg$FAILED) {
                        peg$reportedPos = s0;
                        s1 = peg$c27(s2, s4);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
        } else {
            peg$currPos = s0;
            s0 = peg$c0;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseprimary();
        }

        return s0;
    }

    function peg$parseprimary() {
        var s0, s1, s2, s3, s4, s5;

        s0 = peg$currPos;
        s1 = peg$parseletter();
        if (s1 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c30(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c31;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parsesep();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parsesep();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseAll();
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parsesep();
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$parsesep();
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s5 = peg$c33;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$c34); }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$reportedPos = s0;
                                s1 = peg$c2(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$c0;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 40) {
                    s1 = peg$c35;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c36); }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parsesep();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parsesep();
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseAll();
                        if (s3 !== peg$FAILED) {
                            s4 = [];
                            s5 = peg$parsesep();
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$parsesep();
                            }
                            if (s4 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s5 = peg$c37;
                                    peg$currPos++;
                                } else {
                                    s5 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$c38); }
                                }
                                if (s5 !== peg$FAILED) {
                                    peg$reportedPos = s0;
                                    s1 = peg$c2(s3);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$c0;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                }
            }
        }

        return s0;
    }

    function peg$parsesep() {
        var s0;

        if (peg$c39.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c40); }
        }

        return s0;
    }

    function peg$parseletter() {
        var s0;

        if (input.substr(peg$currPos, 5) === peg$c41) {
            s0 = peg$c41;
            peg$currPos += 5;
        } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c42); }
        }
        if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 48) {
                s0 = peg$c43;
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c44); }
            }
            if (s0 === peg$FAILED) {
                if (peg$c45.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
                }
            }
        }

        return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    } else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail({ type: "end", description: "end of input" });
        }

        throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }

    return {
        SyntaxError: SyntaxError,
        parse:       parse
    };
}

